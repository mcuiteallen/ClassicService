const dbmsHttp = require('dbmsHttp');
const DbmsHttp = new dbmsHttp();
const fs = require('fs');

async function insertSqliteData() { // Insert Data
  let tmpColumns = [{ "name": "column1", "type": "TEXT"}, { "name": "column2", "type": "INTEGER"}];
  let tmpValues = [["testText1", 1234], ["testText2", 1234567]]	;
  let insertSQLiteReq = await DbmsHttp.insertSqliteData('testTable', tmpColumns, tmpValues, 'testDB');
}

async function querySqliteData () { // Query Data
  let tmpColumns = ["column1", "column2"];
  let tmpSubQuery = [{"logic":"&&", "key":"column2", "val": 1234, "conditions":">"}, {"logic":"&&", "key":"column1", "val": "testText2", "conditions":"="}]	;
  let querySQLiteReq1 = await DbmsHttp.querySqliteData('testTable', 'none', 'none', 'testDB');    
  let querySQLiteReq2 = await DbmsHttp.querySqliteData('testTable', tmpColumns, 'none', 'testDB'); 
  let querySQLiteReq3 = await DbmsHttp.querySqliteData('testTable', 'none', tmpSubQuery, 'testDB'); 
  let querySQLiteReq4 = await DbmsHttp.querySqliteData('testTable', tmpColumns, tmpSubQuery, 'testDB'); 
}

async function updateSqliteData () { //Update Data
  let tmpColumn = "column2";
  let tmpSubQuery = [{"logic":"&&", "key":"column2", "val": 1234, "conditions":">"}, {"logic":"&&", "key":"column1", "val": "testText2", "conditions":"="}]	;
  let updateSQLiteReq1 = await DbmsHttp.updateSqliteData('testTable', tmpColumn, 1235, 'none', 'testDB');    
  let updateSQLiteReq2 = await DbmsHttp.updateSqliteData('testTable', tmpColumn, 1236, tmpSubQuery, 'testDB'); 
}
 
async function exportSqliteData () { //Export Data
  let tmpColumns = ["column1", "column2"];
  let tmpSubQuery = [{"logic":"&&", "key":"column2", "val": 1234, "conditions":">"}, {"logic":"&&", "key":"column1", "val": "testText2", "conditions":"="}]	;
  let exportSQLiteReq1 = await DbmsHttp.exportSqliteData('testTable', 'none', 'none', 'testDB');    
  let exportSQLiteReq2 = await DbmsHttp.exportSqliteData('testTable', tmpColumns, 'none', 'testDB'); 
  let exportSQLiteReq3 = await DbmsHttp.exportSqliteData('testTable', 'none', tmpSubQuery, 'testDB'); 
  let exportSQLiteReq4 = await DbmsHttp.exportSqliteData('testTable', tmpColumns, tmpSubQuery, 'testDB'); 
}

async function deleteSqliteData () { //Delete Data 
  let tmpSubQuery = [{"logic":"&&", "key":"column2", "val": 1236, "conditions":"="}, {"logic":"&&", "key":"column1", "val": "testText2", "conditions":"="}]	;
  let deleteSQLiteReq1 = await DbmsHttp.deleteSqliteData('testTable', tmpSubQuery, 'testDB');  
  let deleteSQLiteReq2 = await DbmsHttp.deleteSqliteData('testTable', 'none', 'testDB'); 
}

async function importSqliteData () { //Import Data 
  let formData =  {
    myCsv: fs.createReadStream('./testTable_1603358956231.csv'),
    tableName: 'testTable',
    dbName: 'testDB'
  } 
  let deleteSQLiteReq1 = await DbmsHttp.importSqliteData(formData); 
}

async function getSchemaByDBSqliteData () { //Get Schema By DB
  let getSchemaByDBSQLiteReq1 = await DbmsHttp.getSchemaByDBSqliteData(); 
}

async function getDBListSqliteData () { //Get DB List 
  let getDBListSQLiteReq1 = await DbmsHttp.getDBListSqliteData(); 
}

async function dropTableSqliteData () { //Drop Table 
  let dropTableSQLiteReq1 = await DbmsHttp.dropTableSqliteData('testDB', 'testTable'); 
}

async function dropDBSqliteData () { //Drop DB
  let dropDBSQLiteReq1 = await DbmsHttp.dropDBSqliteData('testDB'); 
}
